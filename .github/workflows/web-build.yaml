name: Web Build

on:
  push:
    branches: [ main, master ]  # Support both main and master branch names
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-web:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0
    
    - name: Get repository structure
      run: |
        ls -la
        find . -type f -name "CMakeLists.txt" | sort
        find . -type d -name "src" | sort
        find . -type d -name "include" | sort
        find . -type d -name "assets" | sort
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build libsdl2-dev libsdl2-image-dev
    
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v11
      with:
        version: 'latest'
        no-cache: true
    
    - name: Verify Emscripten installation
      run: |
        emcc --version
        em++ --version
    
    - name: Create build directory
      run: mkdir -p build_web
    
    - name: Check for assets directory and create if needed
      run: |
        echo "Skipping assets check - not required for build"
    
    - name: Configure CMake
      working-directory: ./build_web
      run: |
        # Check CMakeLists.txt content
        echo "CMakeLists.txt content:"
        cat ../CMakeLists.txt
        
        # Configure with more aggressive warning suppression
        emcmake cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_TTF=2 -w" \
          -DCMAKE_CXX_FLAGS="-s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_TTF=2 -w" \
          -DCMAKE_EXE_LINKER_FLAGS="-s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_TTF=2 -s SDL2_IMAGE_FORMATS='[\"png\"]' -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -s EXPORTED_RUNTIME_METHODS='[\"ccall\",\"cwrap\"]'"
    
    - name: Build
      working-directory: ./build_web
      run: cmake --build .
    
    - name: List build artifacts
      run: ls -la build_web/
    
    - name: Create web distribution directory
      run: mkdir -p web_dist
    
    - name: Copy build artifacts to distribution directory
      run: |
        # Find the executable name (could be different from repository name)
        # Copy all potential web files
        find build_web -maxdepth 1 -type f -name "*.html" -exec cp {} web_dist/ \;
        find build_web -maxdepth 1 -type f -name "*.js" -exec cp {} web_dist/ \;
        find build_web -maxdepth 1 -type f -name "*.wasm" -exec cp {} web_dist/ \;
        find build_web -maxdepth 1 -type f -name "*.data" -exec cp {} web_dist/ \;
        
        # Create a list of files in the web_dist directory
        echo "Files in web distribution:"
        ls -la web_dist/
    
    - name: Create index page
      run: |
        HTML_FILES=($(find web_dist -maxdepth 1 -type f -name "*.html"))
        
        if [ ${#HTML_FILES[@]} -eq 0 ]; then
          echo "No HTML files found in the build directory. Creating a placeholder."
          cat > web_dist/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>C++ Roguelike</title>
            <style>
              body {
                margin: 0;
                background-color: #222;
                color: #eee;
                font-family: sans-serif;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
              }
              .error {
                color: #ff5555;
                max-width: 600px;
                text-align: center;
                padding: 20px;
              }
            </style>
          </head>
          <body>
            <h1>C++ Roguelike Build</h1>
            <div class="error">
              <p>No web build files were generated. Please check the GitHub Actions logs for more information.</p>
            </div>
          </body>
          </html>
          EOL
        elif [ ${#HTML_FILES[@]} -eq 1 ] && [ ! -f web_dist/index.html ]; then
          # If there's exactly one HTML file and it's not index.html, create a redirect
          GAME_HTML=$(basename "${HTML_FILES[0]}")
          cat > web_dist/index.html << EOL
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>C++ Roguelike</title>
            <style>
              body {
                margin: 0;
                background-color: #222;
                color: #eee;
                font-family: sans-serif;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
              }
              canvas {
                border: 1px solid #444;
                display: block;
                margin: 0 auto;
              }
              h1 {
                text-align: center;
                margin-bottom: 20px;
              }
              #loading {
                text-align: center;
                margin-top: 20px;
              }
            </style>
            <script>
              window.onload = function() {
                window.location.href = "${GAME_HTML}";
              }
            </script>
          </head>
          <body>
            <h1>C++ Roguelike</h1>
            <div id="canvas-container"></div>
            <div id="loading">Loading...</div>
          </body>
          </html>
          EOL
        fi
    
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: web_dist
        branch: gh-pages
        clean: true